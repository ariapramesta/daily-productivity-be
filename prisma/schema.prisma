// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  name         String
  password     String
  refreshToken String?
  createdAt    DateTime  @default(now())
  Note         Note[]
  Todo         Todo[]
  Expense      Expense[]
}

model Note {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Todo {
  id       String    @id @default(uuid())
  title    String
  deadline DateTime?
  userId   String
  user     User      @relation(fields: [userId], references: [id])

  items TodoItem[]
  tags  Tag[]      @relation("TodoTags")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TodoItem {
  id      String  @id @default(uuid())
  content String
  done    Boolean @default(false)

  todoId String
  todo   Todo   @relation(fields: [todoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id    String @id @default(uuid())
  name  String @unique
  todos Todo[] @relation("TodoTags")
}

model Expense {
  id        String        @id @default(uuid())
  title     String
  amount    Int
  remaining Int
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  items     ExpenseItem[]
}

model ExpenseItem {
  id        String   @id @default(uuid())
  name      String
  cost      Int
  createdAt DateTime @default(now())
  expenseId String
  expense   Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
}
